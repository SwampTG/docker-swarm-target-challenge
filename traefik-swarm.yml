version: '3.8'

services:
  traefik:
    image: traefik:latest
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Use the traefik-public network (declared below)
      - traefik.docker.network=net-1
      # Use the custom label "traefik.constraint-label=traefik-public"
      # This public Traefik will only use services with this label
      # That way you can add other internal Traefik instances per stack if needed
      - traefik.constraint-label=traefik-public
      # admin-auth middleware with HTTP Basic auth
      # Using the environment variables USERNAME and HASHED_PASSWORD
      # https-redirect middleware to redirect HTTP to HTTPS
      # It can be re-used by other stacks in other Docker Compose files
      # traefik-http set up only to use the middleware to redirect to https
      # Uses the environment variable DOMAIN
      # traefik-https the actual router using HTTPS
      # Use the special Traefik service api@internal with the web UI/Dashboard
      - traefik.http.services.traefik-public.loadbalancer.server.port=8080
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.http.address=:80"
      - "--log.level=DEBUG"
      - "--accesslog"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.network=net-1"
      - "--providers.docker.swarmModeRefreshSeconds=15s"
      - "--providers.docker.constraints=Label(\"traefik.enable=true\")"
      - "--providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)"
      - "--providers.docker.defaultRule=Host(`{{ trimPrefix `/` (index .Labels `com.docker.swarm.service.name`) }}.{{ index .Labels `com.docker.swarm.service.namespace` }}.swarm`)"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - net-1
    deploy:
      mode: replicated
      replicas: 3
      placement:
        constraints:
          - node.role == manager

networks:
  net-1:
    external: true
  net-2:
    external: true
